{% schema %}
{
  "name": "ano_iandt",
  "tag": "section",
  "class": "slideshow",
  "settings": [
    {
      "type": "text",
      "id": "title",
      "label": "Slideshow"
    }
  ],
  "blocks": [
    {
      "name": "Slide",
      "type": "slide",
      "settings": [
        {
          "type": "image_picker",
          "id": "image",
          "label": "Image"
        },
        {
          "type": "text",
          "id": "heading",
          "label": "Heading Text",
          "default": "Slide Heading"
        },
        {
          "type": "textarea",
          "id": "description_grow",
          "label": "description_grow Text",
          "default": "description_grow for this slide."
        },
        {
          "type": "url",
          "id": "button_vd_url",
          "label": "button_vd URL"
        },
        {
          "type": "text",
          "id": "button_vd_label",
          "label": "button_vd Label",
          "default": "Learn More"
        },
        {
          "type": "url",
          "id": "button_vd_url_1",
          "label": "button_vd URL"
        },
        {
          "type": "text",
          "id": "img_btn_label",
          "label": "Image button_vd",
          "default": "Play Video"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "ano_iandt",
      "blocks": [
        {
          "type": "slide"
        },
        {
          "type": "slide"
        },
        {
          "type": "slide"
        }
      ]
    }
  ]
}
{% endschema %}


<html>

<body>
    <div class="growth_pagination">
       {% for block in section.blocks %}
              <span class="dot"></span><br>
            {% endfor %}
    </div>
  

    {% for block in section.blocks %}
        <div class="container">
            <div class="text-container">
                <h1 class="heading">{{ block.settings.heading }}</h1>
                <h3 class="description_grow">{{ block.settings.description_grow }}</h3>
            </div>
            <div class="image-container">
                <img src="{{ block.settings.image | img_url:"original" }}" alt="An image">
            </div>
            <div class="button_vd">
              <a href="{{ block.settings.button_vd_url_1 }}" style="text-decoration: none; ">
                <span class="triangle">â–¶</span>
              </a>
            </div>
        </div>
    {% endfor %}
</body>

</html>


<style>
  body {
    box-sizing: border-box;
}

.container {
    margin-left: 30px;
    margin-right: 40px;
    position: relative;
    height: 100vh;
    width: auto;
    display: flex;
    padding: 10px;
    align-content: center;
    justify-content: center;
    flex-wrap: wrap;
    display: none; /* Hide all containers by default */
}

.container.active {
    display: flex; /* Show only active container */
}

.image-container {
    flex: 1;
    height: 100%;
    align-content: center;
    justify-content: center;
    display: flex; /* Make image-container a flexbox */
    overflow: hidden; /* Ensure no overflow */
    position: relative; /* Enable precise positioning */
}

.image-container img {
    width: 100%; /* Stretch to fill the container horizontally */
    height: 100%; /* Stretch to fill the container vertically */
    object-fit: fill; /* Fit the image exactly into the container (may distort) */
    object-position: center; /* Center the image within the container */
}


.text-container {
    flex: 1;
    height: 100%;
    align-content: center;
    justify-content: center;
    
    display: flex;
    flex-direction: column;
}

.heading {
    font-size: 80px;
    text-align: center;
}

.description_grow {
    font-size: 20px;
    text-align: center;
    padding-left: 20%;
    padding-right: 20%;
}

/* button_vd styles */
.button_vd {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background-color: white;
    color: black;
    text-align: center;
    padding: 30px;
    text-decoration: none;
    border-radius: 5px;
    cursor: pointer;
    z-index: 10;
    box-shadow: 0 0 10px rgba(255, 255, 255, 0.5); /* Initial glow */
    animation: glowing 1s infinite; /* Apply glowing animation */
}

@keyframes glowing {
    0% {
        box-shadow: 0 0 10px rgba(255, 255, 255, 0.5);
    }
    50% {
        box-shadow: 0 0 20px rgba(255, 255, 255, 1), 0 0 30px rgba(0, 255, 255, 0.8);
    }
    100% {
        box-shadow: 0 0 10px rgba(255, 255, 255, 0.5);
    }
}


.button_vd:hover {
    background-color: #b6d0ec;
}

/* growth_pagination styles */
.growth_pagination {
    /* background-color:red; */
    position: absolute;
    top: 60%;
    right: 10px;
    height: auto;
    transform: translateY(-50%);
    display: flex;
    flex-direction: column;
    align-content: space-evenly;
  flex-wrap: wrap;
    z-index: 99; /* Ensure it's above the images but below the button_vd */
}

.dot {
    width: 5px;
    height: 5px;
    padding: 10px;
     margin:auto;
    background-color: rgb(8, 7, 7);
    cursor: pointer;
    transition: background-color 0.3s ease;
   z-index: 999;
}

.dot:hover {
    background-color: #007bff;
}

.dot.active {
    background-color: #007bff;
}

/* Responsive styles */
@media (max-width: 768px) {
    .container {
        flex-direction: column; /* Stack text and image sections */
        height: auto; /* Allow container height to adjust */
    }

    .text-container {
        order: 1; /* Place text section above image */
        text-align: center; /* Center align the text */
        padding: 10px;
    }

    .image-container {
        order: 2; /* Image below text */
        height: 60%; /* Adjust height of image */
        position: relative; /* Allow button_vd positioning within image */
    }

    .button_vd {
        position: absolute;
        top: 70%;
        left: 50%;
        transform: translate(-50%, -50%);
        background-color: white;
        color: black;
        padding: 15px 25px;
    }

    /* Adjust growth_pagination for mobile */
    .growth_pagination {
        top: 60%;
        right: 0;
        transform: translateY(-50%,-50%); /* Reset vertical positioning */
        
    }
}


  @keyframes slideFromTop {
    from {
        transform: translateY(-100%);
        opacity: 0;
    }
    to {
        transform: translateY(0);
        opacity: 1;
    }
}

@keyframes slideFromBottom {
    from {
        transform: translateY(100%);
        opacity: 0;
    }
    to {
        transform: translateY(0);
        opacity: 1;
    }
}
 

.slide-from-top {
    animation: slideFromTop 1s ease forwards;
}

.slide-from-bottom {
    animation: slideFromBottom 1s ease forwards;
}


</style>


<script>
  document.addEventListener("DOMContentLoaded", function () {
    const button_vd = document.querySelectorAll(".button_vd");

    button_vd.forEach(function (btn, index) {
        btn.addEventListener("click", function () {
            const url = "{{ block.settings.button_vd_url }}";  // Use Liquid to dynamically get the URL
            window.open(url, "_self");
        });
    });
});

document.addEventListener("DOMContentLoaded", function () {
  const containers = document.querySelectorAll(".container");
  const growth_pagination = document.querySelector(".growth_pagination");
  let currentIndex = 0; // Track the currently active slide
  let autoSlideInterval;

  // Generate dots dynamically based on the number of slides
  containers.forEach((_, index) => {
    const dot = document.createElement("div");
    dot.classList.add("dot");
    if (index === 0) {
      dot.classList.add("active"); // Set the first dot as active
    }
    growth_pagination.appendChild(dot);
  });

  const dots = document.querySelectorAll(".dot");

  function updateSlide(index) {
    // Hide all containers
    containers.forEach((container) => {
      container.style.display = "none";
      container.classList.remove("slide-from-top", "slide-from-bottom", "active");
    });

    // Show the targeted container with animation
    const direction = index > currentIndex ? "from-bottom" : "from-top";
    containers[index].style.display = "flex";
    containers[index].classList.add("active");
    containers[index].classList.add(direction === "from-top" ? "slide-from-top" : "slide-from-bottom");

    // Update active dot
    dots.forEach((dot, i) => {
      dot.classList.toggle("active", i === index);
    });

    // Update the current index
    currentIndex = index;
  }

  function startAutoSlide() {
    autoSlideInterval = setInterval(() => {
      const nextIndex = (currentIndex + 1) % containers.length;
      updateSlide(nextIndex);
    }, 6000); // 6 seconds interval
  }

  // Event listeners for dots
  dots.forEach((dot, index) => {
    dot.addEventListener("click", function () {
      clearInterval(autoSlideInterval); // Stop auto-slide on manual interaction
      updateSlide(index);
      startAutoSlide(); // Restart auto-slide after interaction
    });
  });

  // Initialize the slider
  updateSlide(0); // Start with the first slide
  startAutoSlide(); // Start automatic sliding
});



</script>